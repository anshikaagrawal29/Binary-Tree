using System;
using System.Collections.Generic;

public class Tree
{

  public Node root;
  public class Node
  {
      public int data;
      public Node left,right;
      public Node(int d)
      {
        data = d;
        left = right = null;
      }
  }
  
  public void print(Node n)
  {
    Queue<Node> q = new Queue<Node>();
     q.Enqueue(n);
    while(q.Count > 0)
    {
      Node curr = q.Dequeue();
        Console.Write(curr.data + " ");
        if(curr.left != null)
          q.Enqueue(curr.left);
        if(curr.right != null)
          q.Enqueue(curr.right);
      
    }
    
    Console.WriteLine( " -> ");
  }
  
  
  public Node remove(Node curr, int k , int s)
  {
      if(curr == null)
      return null;
       
      curr.left = remove(curr.left, k , s + curr.data);
      curr.right = remove(curr.right, k , s + curr.data);
      if((s + curr.data) < k && curr.left == null && curr.right == null)
      {
          return null;
      }
       
       return curr; 
  }
  public static void Main()
  {
      Tree t = new Tree();
      t.root = new Node(1);
      t.root.left = new Node(2);
      t.root.right = new Node(3);
      t.root.left.left = new Node(4);
      t.root.left.right = new Node(5);
      t.root.left.right.left = new Node(12);
      t.root.right.left = new Node(6);
      t.root.right.right = new Node(7);
      t.root.right.right.left = new Node(10);
      t.root.right.right.left.right = new Node(11);
      t.root.left.left.left = new Node(8);
      t.root.left.left.left.right = new Node(1);
      t.root.left.left.right = new Node(9);
      t.root.left.left.right.left = new Node(13);
      t.root.left.left.right.right = new Node(14);
      t.root.left.left.right.right.left = new Node(15);
      t.print(t.root);
      t.remove(t.root, 20, 0);
      t.print(t.root);
      
  }
}
