// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler
    
using System;
using System.Collections.Generic;

public class Tree
{
    public Node root;
    public class Node
    {
        public Node left;
        public Node right;
        public int data;
        public Node(int d)
        {
            data =d;
            left = right = null;
        }
    }
    
    public Node insert(int d)
    {
        if(root == null)
         {
             root = new Node(d);
             return root;
         }
         
         Queue<Node> q = new Queue<Node>();
         q.Enqueue(root);
         Node curr = null;
         
         while(q.Count > 0)
         {
             curr = q.Dequeue();
             
             if(curr.left == null)
             {
                 curr.left = new Node(d);
                 return root;
             }
             else
             {
                 q.Enqueue(curr.left);
             }
             if(curr.right == null)
             {
                 curr.right = new Node(d);
                 return root;
             }
             else
             {
                 q.Enqueue(curr.right);
             }
         }
         
         return root;
    }
    
    public void print()
    {
         Queue<Node> q = new Queue<Node>();
         q.Enqueue(root);
         Node curr = null;
         while(q.Count > 0)
         {
             curr = q.Dequeue();
             Console.Write(curr.data + " ");
             
             if(curr.left != null)
             {
                 q.Enqueue(curr.left);
             }
              if(curr.right != null)
             {
                 q.Enqueue(curr.right);
             }
         }
    }
    
    int sum =0;
    public int Diameter(Node root)
    {
        if(root == null)
        return 0;
        
        if(root.left == null && root.right == null)
        return 1;
        
        int lh = Diameter(root.left);
        int rh = Diameter(root.right);
        
        sum = Math.Max(sum,lh+rh+1);
        
        return Math.Max(lh,rh) + 1; 
    }
    
    public static void Main(string[] args)
    {
       Tree t = new Tree();
       t.insert(1);
       t.insert(2);
       t.insert(3);
       t.root.left.left = new Node(4);
       t.root.left.right = new Node(5);
       t.root.left.right.right = new Node(6);
       t.root.left.right.right.left = new Node(7);
       t.root.left.right.right.right = new Node(8);
       t.root.left.right.right.right.left = new Node(9);
       t.root.left.left.left = new Node(10);
       t.root.left.left.right = new Node(11);
       t.root.left.left.right.left = new Node(12);
       t.root.left.left.right.left.right = new Node(13);
       
       t.Diameter(t.root);
       Console.WriteLine(t.sum);
    }
}
