using System;
using System.Collections.Generic;

public class Tree
{

  public Node root;
  public class Node
  {
      public int data;
      public Node left,right;
      public Node(int d)
      {
        data = d;
        left = right = null;
      }
  }
  
  public void insert(int d)
  {
      if(root == null)
      {
        root = new Node(d);
        return;
      }
      
      Queue<Node> q = new Queue<Node>();
       q.Enqueue(root);
      while(q.Count > 0)
      {
        Node curr = q.Dequeue();
        
          if(curr.left == null)
          {
            curr.left = new Node(d);
            return;
          }
          else
          {
            q.Enqueue(curr.left);
          }
          
          if(curr.right == null)
          {
            curr.right = new Node(d);
            return;
          }
          else
          {
            q.Enqueue(curr.right);
          }
      }
  }
  
  public void print(Node n)
  {
      if(n == null)
      return;
      
    Queue<Node> q = new Queue<Node>();
     q.Enqueue(n);
    while(q.Count > 0)
    {
      Node curr = q.Dequeue();
        Console.Write(curr.data + " ");
        if(curr.left != null)
          q.Enqueue(curr.left);
        if(curr.right != null)
          q.Enqueue(curr.right);
      
    }
  }
 
  public void createTree(int[] arr)
  {
      //construct dictionary
      Dictionary<int, List<int>> d = new Dictionary<int, List<int>>();
      for(int i=0; i < arr.Length; i++)
      {
          if(d.ContainsKey(arr[i]))
          {
              d[arr[i]].Add(i);
          }
          else
          {
              d.Add(arr[i],new List<int>(){i});
          }
      }
     
      
      Queue<Node> q = new Queue<Node>();
      Node curr = null;
      foreach(int elem in d[-1])
      {
           root = new Node(elem);
      }
      
      if(root == null)
      return;
     
      q.Enqueue(root);
      
      while(q.Count > 0)
      {
          curr = q.Dequeue();
          if(d.ContainsKey(curr.data))
          {
              foreach(int elem in d[curr.data])
              {
                  if(curr.left == null)
                  {
                      curr.left = new Node(elem);
                      q.Enqueue(curr.left);
                  }
                  else if(curr.right == null)
                  {
                      curr.right = new Node(elem);
                      q.Enqueue(curr.right);
                  }
              }
          }
      }
  }

  public static void Main()
  {
      Tree t = new Tree();
      int[] arr = new int[]{1,5,5,2,2,-1,3};
      t.createTree(arr);
      
      t.print(t.root);
      //delete root and full binary tree
     // t.root  = t.delete(t.root);
      
  }
}
