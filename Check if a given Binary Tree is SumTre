using System;
using System.Collections.Generic;

public class Tree
{

  public Node root;
  public class Node
  {
      public int data;
      public Node left,right;
      public Node(int d)
      {
        data = d;
        left = right = null;
      }
  }
  
  public void insert(int d)
  {
      if(root == null)
      {
        root = new Node(d);
        return;
      }
      
      Queue<Node> q = new Queue<Node>();
       q.Enqueue(root);
      while(q.Count > 0)
      {
        Node curr = q.Dequeue();
        
          if(curr.left == null)
          {
            curr.left = new Node(d);
            return;
          }
          else
          {
            q.Enqueue(curr.left);
          }
          
          if(curr.right == null)
          {
            curr.right = new Node(d);
            return;
          }
          else
          {
            q.Enqueue(curr.right);
          }
      }
  }
  
  int x = 0;
  bool flag = false;
  public int sum(Node curr)
  {
      if(curr == null)
      return 0;
      
      if(curr.left == null && curr.right == null)
      return curr.data;
      
      int l = sum(curr.left);
      int r = sum(curr.right);
      
      //when it will come to root, l will have sum from left nodes and r will have sum of right nodes
      if(curr.data == x)
      {
          if(l+r == x)
           flag = true;
      }
      
      return l+r+curr.data;
  }
  public void print(Node n)
  {
      if(n == null)
      return;
      
    Queue<Node> q = new Queue<Node>();
     q.Enqueue(n);
    while(q.Count > 0)
    {
      Node curr = q.Dequeue();
        Console.Write(curr.data + " ");
        if(curr.left != null)
          q.Enqueue(curr.left);
        if(curr.right != null)
          q.Enqueue(curr.right);
      
    }
  }
  

  public static void Main()
  {
      Tree t = new Tree();
      t.insert(26);
      t.insert(10);
      t.insert(3);
      t.insert(4);
      t.insert(6);
      t.insert(3);
      t.print(t.root);
      t.x = t.root.data;
      t.sum(t.root);
      Console.Write(t.flag);
  }
}
